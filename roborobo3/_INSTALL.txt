=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-= ROBOROBO.3 =-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=- 2008-2017 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-=-=-=-= nicolas.bredeche(at)upmc.fr -=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=
=-=-=-= QUICK START
=-=-=-=

1. Install dependencies:
- SDL2 (developper)
- BOOST (headers only)

2. Build and run:

- Linux:
	- open a terminal, and enter the following commands:
	- "./makefile-manager -l" (this step is optional as a default Makefile exists)
	- "make" (or, if you have multiple processors: "make -jXX", with XX=nb_of_processors)
	- "./roborobo -l config/template_wander_bigrobots.properties"

- MacOSX: use XCode project
	- load project
    - compile and run
    (see below if problem)

3. Use:
	- while running, in the roborobo window, type "h". Help tips will be display in the terminal.


=-=-=-=
=-=-=-= QUICK START : longer version.
=-=-=-=

Preabmle: note that roborobo is used daily on MacOS systems and quite a bunch of linux-based computers, including clusters. It was also tested on Raspberry PI and -- some while ago -- Pandora and MS Windows.


**MacOS X**

- First, a suggestion: use homebrew for package management (http://brew.sh/)
- install Boost-libraries
- install SDL2 (example of location: http://www.libsdl.org/ and http://www.libsdl.org/projects/)
- use the Xcode project (Xcode 7 or later)

It should compile and run OK. 
- If it fails at compilation, be sure to have your libraries installed.
- If it fails at runtime, check the console messages.
    - one possible cause of failure is that you use an older Xcode version, where the binary was hidden somewhere in the system. Typical error: cannot find the properties file.
        - create symbolic links to config/, data/ and /logs directories into the build directory where roborobo binary is created.
        - in order to know where the build directory is:
            - build and run roborobo.
            - roborobo will exit immediately, but not before the location it is launched from is displayed on screen.
            - go to this location ("cd <whereever-is-roborobo-binary>")
            - create symbolic links ("ln -s <whereever-are-roborobo-source>/config config", "(...)/data data", "(...)/logs logs")


**Linux: Ubuntu, Debian**

Dependencies:
- install Boost and SDL2 (using apt-get, synaptic, or any package installation manager)
	Example with Ubuntu 16.04 LTS (as of 2017-02-28):
		sudo apt-get update
		sudo apt-get install libsdl2-2.0
        sudo apt-get install libsdl2-dev
		sudo apt-get install libboost-all-dev

Compile&run:
- use "./makefile-manager -l" to generate a makefile (see below for further explanation of using makefile-manager)
- compile and link: "make" (a new binary is created at the roborobo root called "roborobo"). If you have a multi-core computer, use "make -jXX" with XX the number of cores to use for compilation.
- launch: "./roborobo" (with/without option(s), use "-h" for help)


**Windows**

You basically two options:
- [recommended] use Virtual Box (https://www.virtualbox.org), install Linux. Then follow the steps for Linux-based systems. 
- [not recommended, but known to work] use Cygwin or MinGW or whatever. Not tested after 2008.


=-=-=-=
=-=-=-= makefile-manager (Linux only!)
=-=-=-=

makefile-manager is a script that generates a makefile with only the project(s) you want to compile.
"./makefile-manager -l" lists current state, and creates a default makefile if none exist (see help) by using the template Makefile.modular file (which should not be tampered with).
"./makefile-manager -h" displays usage help.

Quick start: in the console, enter the following commands (set-up makefile, compile, and execute)
    $ ./makefile-manager -l
    $ make  
    $ ./roborobo

Some default projects are activated (TemplateBoids, TemplateVanillaEE, TemplateMedea, TemplateRandomwalk and TemplateWander) for you to test roborobo. Restrain from using TemplateEE as it features some abstract classes used as a basis for other projects.

Remarks:
- note that makefile-manager uses Makefile.modular to create a Makefile file. Makefile.modular should not be modified manually.
- if you want to change from using gcc to clang (or the other way round), edit the Makefile.modular and regenerate a Makefile with the makefile-manager script.
- if you want to activate an existing project, use the makefile-manager script.
    - note that if you want to *create* a new project, go to the prj/ directory, and use the clone_project.py script.
- DO NOT edit the Makefile file as it will be overwritten next time you use makefile-manager
- to speed up compilation on multicore systems, you may want to use "make -j<nb_of_cores>" instead of "make"

=-=-=-=
=-=-=-= THE NEXT STEP
=-=-=-=

Where to go from here? 

Check _README.TXT for further informations.

Check _FAQ.TXT for trouble shooting.

Check prj/clone_project.py to clone an existing project and to start playing around.

[n].
