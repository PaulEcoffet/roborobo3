
gMovableObjects

=-=-=

CircleObject.h:
    => CircleObject reste virtuelle.

    bool canRegister( Sint16 __x, Sint16 __y ); // can we register the object at that position
    	=> [N] merge possible avec canRegister sans paramètre (qui serait à supprimer).

RoundObject.h:

    // the impulses given to the object by nearby robots in the current time step, or other objects in the former
    std::map<int, Point2d> _impulses;
    
    // the speed we expect to move at after computing collisions, which we need to be able to tell other objects
    // in polar coordinates
    double _desiredSpeedOrientation;
    double _desiredLinearSpeed;
    
    void isPushed( int __idAgent, Point2d __speed ); // register we've been pushed

    bool _hitWall;
    bool _didMove;

	// coordinates
    double _xReal;
    double _yReal;

    double getXReal() { return _xReal; }
    double getYReal() { return _yReal; }

    Sint16 getXCenterPixel()
    {
        return (Sint16)_xReal;
    }
    
    Sint16 getYCenterPixel()
    {
        return (Sint16)_yReal;
    }

    bool canRegister( Sint16 __x, Sint16 __y );
    bool canRegister( );
    
RoundObject.cpp:

	isPushed() ajouté
	step() mis a jour
		à revoir: 
			_xCenterPixel = (Sint16)(_xReal);  
    		_xCenterPixel = (Sint16)(_yReal);

	canRegister (hérite) et canRegister( Sint16 __x, Sint16 __y ) ajoutés


=-=-=


bp:
-.[ ] energyItems are now correctly displayed and registered
-.[ ] remain: fitness function, selectBestIndividual (or whatever)
-.[ ] bug corrected: clearreservoir()
-.[ ] senderId not complete (should be: #robot_id + #birthdate)
-.[ ] _genome vs. _currentGenome ...??? => _currentGenome seulement
-.[ ] check: genomeList contient les indivs de la gen précédente. Implement: lors de la generation ou un robot se renouvelle, il ne peut transmettre son génome. (permet de gerer le mode de mise a jour de roborobo async/random)
-.[ ] command-line: batch mode.
-.[ ] libcaca ou aalib (résolu: video_driver=dummy)
-.[ ] vitesse de rotation plus rapide? => non
-.[ ] pas le bon resetFitness dans le constructeur. résolu.
-.[ ] script python pour graphes
-.[ ] définir une region pour la position initiale des agents
-.[ ] définir une region pour la position initiale des objects
-.[ ] gGroundSensorImage_restoreOriginal: option pour permettre de remettre la valeur de la groundsensorimage a l'origine lors de réécriture (ou non, ie. du blanc). Remarque: si faux, les objets ne sont positionnables que dans les régions de pixels blancs.
-.[ ] create maze environment (use: http://www.mazegenerator.net/ )
-.[?] change name "GroundSensor" to "Footprint"
-.[+] vanillaEE: check if random selection when multiple 1st-rank
-.[-] consider Ctlrs vs. WM --> WM contains only info about robot state (no modif)
-.[=] enable include of pties files within pties file.
-.[+] MLP/Elman: tmp[j] += tanh(_weights[weightsIndice++]) * _biaisValue;
-.[=] save to PNG, added sdl2_image dependency
-.[-] unifier la méthode de rendu visuel des objets/landmarks/agents dans gScreen
-.[=] changement de la méthode de shuffle dans World::updateWorld()
-.[=] replace [s|g]etNewGenomeStatus by mapGenotypeToPhenotype() ...? => no, but added mapGenotypeToPhenotype().
-.[-] Relevance of gRefreshUserDisplay? => deleted
- [-] set up different environment for benchmark.
- [+] revoir EnergyItem (à supprimer)
- [+] supprimer gBackgroundImage...?
- [=] random=>Mersenne-Twister
- [=] putPixel32_secured vs putPixel32
- [=] CircleObject::canRegister() et registerObject: implement as robots (ie. circle, not disk)
- [+] [@Laura] cf. updateDisplay() pour faire un saveRenderScreenshot modulable (ou autre nom)
- [+] [@Theotime] Mais disons que y’a pas mal de trucs qui dépendent du timestamp même si on change la valeur par défaut, comme outputFilename et dans saveImage()
		=> search gStartTime
- [=] revoir le systeme de coordonnées pour les objets
	- integer vs real coordinates for robots (and roundObject)
	- Point2d _position.x et .y vs. _xCenterPixel et yCenterPixel;
- [++] (@Laura) Dans la fonction performVariation(), il faut remplacer rand()/RAND_MAX par ranf().
- [=] user-control, est-ce qu'on peut qd même exécuter le controleur du robot?
- BREAKPOINT: code pour laura (saveSnapshot) en cours d'implémentation
- [=] clean-up includes (incl.: common.h is included by roborobo.h ; use of forward declaration)


---

Show the origin of selection pressure (envt vs obj) depends on the pressure to survival
- low pressure to survival: optimize objective
- high pressure to survival: optimize survival only
- by-product: pursuing an objective may be detrimental vs survival
Possible outcome: lifetime duration may ease the burden of survival in a non-linear manner 
	--> if long life, chances to encounter other even if only objective is pursued
	--> would imply transition depending on the envt pressure applied

candidates:
- popsize
- lifetime
- ...

=-=-=-=-=

revert to latest "official" commit:
 git fetch --all
 git reset --hard origin/master

=-=-=-=-=

Pour mettre les dernières modifs sur une nouvelle branche:
 git branch roborobo-movingObjects
 git checkout roborobo-movingObjects
 git commit -a -m "Work in progress"
 git push --> ou: git push --set-upstream origin roborobo-movingObjects

Divers:
 git branch --> affiche les branches locales
 git branch -v --> donne le dernier commit
 git branch -vv --> donne une info sur la synchro entre les branches locales et celles du serveur
 git log --oneline --graph --> donne tous les commits (lisible)

Changer de branche:
 git checkout master -- changer vers la branche master

Pour merger, depuis la branche que l'on souhaite garder:
 git merge <autre_branche>   (conseil: à faire avec Xcode) -- inclus un commit (pas un push)
 git branch -d <autre_branche> (supprime la branche en local)
 aller sur github pour supprimer une vieille branche.
